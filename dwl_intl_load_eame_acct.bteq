##################################################################################
# PURPOSE: THIS SCRIPT IS TO LOAD THE DATA FROM EAME_SLS_ACCTG_DOC_HDR IN ACQ TO
#          EAME_ACCT TABLE IN DWL LAYER.
#
# REVISION HISTORY:
# ST REQUEST        DATE               WHO               COMMENTS
#  N/A            09/09/2015           Cognizant        INITIAL VERSION
#  N/A            22/09/2015           Cognizant        Added FI_DOCSTAT, DOC_CURRCY,AMOUNT,DW_PIV_ID,INV_ITEM,INV_YEAR
#  N/A            03/10/2016           Cognizant        Removed FISCVRNT_E,RECTYPE,VERSION columns and added LOC_CURRCY,OI_ERFMG,OI_BPMNG,UNIT,OI_BPRME columns
#  N/A            31/10/2016           Cognizant        Added New Column FISCYEAR in Source JOIN
#  N/A            16/11/2016           Cognizant        Removed Column DW_ACCT_LN_SEQ_NUM & AC_DOC_LN
#  N/A            17/11/2016           Cognizant        Added AC_DOC_LN
#  N/A            21/11/2016           Cognizant        added column DW_ACCT_LN_SEQ_NUM & AC_LEDGER
#  N/A            01/24/2017           Cognizant        Added columns as part of sprint2 and sprint3
#  N/A	          08/31/2020		   Pepsico			Added Surrogate Key logic for 6 new key tables
#  N/A            28/07/2021           PEPSICO		Added three columns (DEBITOR,vk_vendor,DW_CUST_ID_DEBITOR) from EAME_SLS_ACCTG_DOC_HDR

#############################################################################################

##########################################
#  REDIRECT STDOUT/STDERR TO LOGFILE
##########################################

  CTL_END_DTM_GEN=`date +"%Y-%m-%d %H:%M:%S"`

  echo "$CTL_END_DTM_GEN"
  
bteq <<EOF >>$LOGFILE 2>&1
  .RUN FILE ${LOGON_BTQ}
  .IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;
  .SET WIDTH 254
  .SET MAXERROR 4

  SELECT CURRENT_TIMESTAMP(0);

  .IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

  /************************************************************************************************************************************
                        ADDITIONAL STEP TO INSERT THE MISSING COMPANY CODES
************************************************************************************************************************************/

----------------------------------------------------------------------------------------------------------------------------------
/*GET THE CRU_ID's for EAME from Source*/
----------------------------------------------------------------------------------------------------------------------------------
CREATE VOLATILE TABLE CRU_CNTRL_ATRBT_TRNSPS_VT ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      CRU_ID INTEGER ,
      CRU_NM VARCHAR(1024) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL,
      SYS_ABRVTN_TXT VARCHAR(250) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CFV_SBJCT_CDV VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL,
      CFV_SBJCT_NM VARCHAR(1024) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL,
      SYS_ID INTEGER NOT NULL,
      CTRY_CDV VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CO_CDV VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      MKT_ID INTEGER,
      ROW_CREATE_DTM TIMESTAMP(0) NOT NULL ,
      ROW_CREATE_USER_ID VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL ,
      ROW_LAST_UPDT_DTM TIMESTAMP(0) NOT NULL ,
      ROW_LAST_UPDT_USER_ID VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL)
      PRIMARY INDEX ( CRU_ID ,SYS_ID ,CTRY_CDV ,CO_CDV )ON COMMIT PRESERVE ROWS;
	  
----------------------------------------------------------------------------------------------------------------------------------
/*Create Volatile table to limit data volume*/
----------------------------------------------------------------------------------------------------------------------------------
CREATE MULTISET VOLATILE TABLE EAME_SLS_ACCTG_DOC_HDR_VT ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO,
     MAP = TD_MAP1
     (
      COMP_CODE VARCHAR(4) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FISCVARNT VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FISCPER INTEGER,
      FISCVRNT_E VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AC_LEDGER VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AC_DOC_NR VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AC_DOC_LN VARCHAR(6) CHARACTER SET UNICODE NOT CASESPECIFIC,
      RECTYPE VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      VERSION VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AC_DOC_NO VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FI_AWTYP VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      PSM_AWKEY VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FI_DOCSTAT VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AC_DOC_TYP VARCHAR(2) CHARACTER SET UNICODE NOT CASESPECIFIC,
      DOC_DATE DATE FORMAT 'YYYYMMDD',
      PSTNG_DATE DATE FORMAT 'YYYYMMDD',
      CREATEDON DATE FORMAT 'YYYYMMDD',
      REF_DOC_NO VARCHAR(16) CHARACTER SET UNICODE NOT CASESPECIFIC,
      LOC_CURRCY VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      DOC_CURRCY VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      RECORDMODE VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FISCYEAR INTEGER,
      FISCPER3 INTEGER,
      DOC_HD_TXT VARCHAR(25) CHARACTER SET UNICODE NOT CASESPECIFIC,
      REV_DOC_NO VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGUPDDT DATE FORMAT 'YYYYMMDD',
      BIC_ZGBVORG VARCHAR(16) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGDBBLG VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGSTJAH INTEGER,
      BIC_ZGKURSF DECIMAL(23,16),
      BIC_ZGPPNAM VARCHAR(12) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGSNAME VARCHAR(12) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGFRATH DECIMAL(23,16),
      BIC_ZGXSTOV VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CURRENCY VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CREA_TIME INTEGER FORMAT '99:99:99',
      AEDAT DATE FORMAT 'YYYYMMDD',
      CREATEDBY VARCHAR(12) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGTCODE VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGREINDAT DATE FORMAT 'YYYYMMDD',
      BIC_ZGAUGCP DATE FORMAT 'YYYYMMDD',
      BIC_ZGZUMSK VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGKZBTR DECIMAL(23,2),
      BIC_ZGTXBHW DECIMAL(23,2),
      BIC_ZGTXBFW DECIMAL(23,2),
      BIC_ZGMWSTS DECIMAL(23,2),
      BIC_ZGWMWST DECIMAL(23,2),
      TAX_BAS_RC DECIMAL(23,2),
      TAX_BAS_TC DECIMAL(23,2),
      BIC_ZGHZUON VARCHAR(18) CHARACTER SET UNICODE NOT CASESPECIFIC,
      R_CURRENCY VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      INV_YEAR INTEGER,
      INV_ITEM INTEGER,
      OI_ERFMG DECIMAL(23,3),
      UNIT VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      OI_BPMNG DECIMAL(23,3),
      OI_BPRME VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      SP_GL_TT VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      AMOUNT DECIMAL(23,2),
      BIC_ZGPSWBT DECIMAL(23,2),
      G_L_CURRCY VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGQSSHB DECIMAL(23,2),
      VALUE_DATE DATE FORMAT 'YYYYMMDD',
      ACCOUNT_RNM VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGREBZG VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZGREBZT VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      ACCT_TYPE VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CHRT_ACCTS VARCHAR(4) CHARACTER SET UNICODE NOT CASESPECIFIC,
      DW_SYS_ID INTEGER,
      DW_LAST_UPDT_DTM TIMESTAMP(0),
      DW_STEP_ID DECIMAL(18,0),
      DW_BTCH_ID DECIMAL(18,0),
      GL_ACCOUNT VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BIC_ZLIITMID VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CLR_DOC_NO VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      DW_ITEM_ID_MATERIAL BIGINT,
      OI_EBELN VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      OI_EBELP INTEGER,
      DW_LOC_ID_PLANT BIGINT,
      OI_MENGE DECIMAL(23,3),
      VALUE_LC DECIMAL(23,2),
      DW_VNDR_ID_VENDOR BIGINT,
      BASE_UOM VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FI_DBCRIND VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      REF_KEY3 VARCHAR(20) CHARACTER SET UNICODE NOT CASESPECIFIC,
      PROFIT_CTR VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CO_AREA VARCHAR(4) CHARACTER SET UNICODE NOT CASESPECIFIC,
      SP_GL_IND VARCHAR(1) CHARACTER SET UNICODE NOT CASESPECIFIC,
      BLINE_DATE DATE FORMAT 'YYYYMMDD',
      ALLOC_NMBR VARCHAR(18) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CLEAR_DATE DATE FORMAT 'YYYYMMDD',
      POST_KEY VARCHAR(2) CHARACTER SET UNICODE NOT CASESPECIFIC,
      COUNTRY VARCHAR(3) CHARACTER SET UNICODE NOT CASESPECIFIC,
      ITEM_NUM INTEGER,
      BUS_AREA VARCHAR(4) CHARACTER SET UNICODE NOT CASESPECIFIC,
      COSTELMNT VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      COSTCENTER VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC,
      COORDER VARCHAR(12) CHARACTER SET UNICODE NOT CASESPECIFIC,
      WBS_ELEMT VARCHAR(24) CHARACTER SET UNICODE NOT CASESPECIFIC,
      POSTXT VARCHAR(60)  CHARACTER SET UNICODE NOT CASESPECIFIC,
      DEB_CRE_DC DECIMAL(17,2),
      DEB_CRE_L2 DECIMAL(17,2),
      LOC_CURRC2 VARCHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      DEBITOR VARCHAR(10)  CHARACTER SET UNICODE NOT CASESPECIFIC,
      vk_vendor VARCHAR(30)  CHARACTER SET UNICODE NOT CASESPECIFIC,
      DW_CUST_ID_DEBITOR  BIGINT

)
PRIMARY INDEX ( COMP_CODE ,FISCVARNT ,FISCPER ,FISCVRNT_E ,AC_LEDGER ,AC_DOC_NR ,AC_DOC_LN ,RECTYPE ,VERSION )ON COMMIT PRESERVE ROWS;

/************************************************************************************************************************************
BT, ET STANDS FOR BEGINING AND END OF TRANSACTION RESPECTIVELY AND ANY FAILURE WITHIN THIS BLOCK WILL ROLLBACK TO ITS PREVIOUS STATE
************************************************************************************************************************************/
BT;

/***********************************************************************************************************************/
--Generate the CRU_ID's for New CO_CDV's for 'SAP EAME' within the pre-resrved range .
--Pick the minumum value - 1 for SAP_WAME with CRU_NM='BLOCKED FOR EAME PIRT'  and sum it with the based on the ROW_NUMBER
/***********************************************************************************************************************/

Insert Into CRU_CNTRL_ATRBT_TRNSPS_VT
Select
MIN_CRU_ID + Row_Number() Over (PARTITION BY SYS_ABRVTN_TXT ORDER BY  SYS_ABRVTN_TXT ) ,
'Unknown' As CRU_NM ,
'SAP EAMEA' As SYS_ABRVTN_TXT ,
'1' As CFV_SBJCT_CDV,
'SALES' As CFV_SBJCT_NM,
6 As SYS_ID,
Null As CTRY_CDV ,
CO_CDV,
NULL AS MKT_ID,
CURRENT_TIMESTAMP(0),
0,
CURRENT_TIMESTAMP(0),
0
From
(
SELECT A.COMP_CODE AS CO_CDV FROM
(
SELECT COMP_CODE, 6 AS DW_SYS_ID
FROM ACQ_P.EAME_SLS_ACCTG_DOC_HDR
WHERE COMP_CODE IS NOT NULL
)A
LEFT OUTER JOIN
(
SELECT
CRU.CRU_ID,CRU.CO_CDV,CRU.SYS_ID
FROM DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V  CRU
WHERE SYS_ABRVTN_TXT='SAP EAMEA'
) DW_CRU
ON A.DW_SYS_ID =DW_CRU.SYS_ID
AND A.COMP_CODE = DW_CRU.CO_CDV
Where (DW_CRU.SYS_ID Is Null Or DW_CRU.CO_CDV Is Null)
Group by 1
)DRVD_DELTA
CROSS JOIN
(
Select MIN(CRU_ID) -1 AS CRU_ID FROM DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V
Where  CFV_SBJCT_CDV= '1'
And SYS_ABRVTN_TXT='SAP EAMEA'
And CRU_NM='BLOCKED FOR SAP EAMEA PIRT'
)MIN_CRU_ID(MIN_CRU_ID);

/***********************************************************************************************************************/
--Delete the pre reserved rows for WAME from DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V  by checking the CRU_IDs in CRU_CNTRL_ATRBT_TRNSPS_VT
/***********************************************************************************************************************/
Delete  from DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V
Where CRU_ID in(Select CRU_ID From CRU_CNTRL_ATRBT_TRNSPS_VT)
AND CFV_SBJCT_CDV= '1'
And SYS_ABRVTN_TXT='SAP EAMEA'
And CRU_NM='BLOCKED FOR SAP EAMEA PIRT';

/***********************************************************************************************************************/
--Check if the CRU_ID from Volatile Table CRU_CNTRL_ATRBT_TRNSPS_VT Exceeds the Predefined Range
/***********************************************************************************************************************/

SELECT CRU_ID FROM CRU_CNTRL_ATRBT_TRNSPS_VT 
WHERE CRU_ID IN(SELECT CRU_ID FROM DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V);

.IF ACTIVITYCOUNT <> 0 THEN .QUIT 66;


/***********************************************************************************************************************/
--Insert The Newly generated CRU_ID's in DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V FROM CRU_CNTRL_ATRBT_TRNSPS_VT
/***********************************************************************************************************************/

INSERT INTO DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V 
 (
 CRU_ID,
 CRU_NM,
 SYS_ABRVTN_TXT,
 CFV_SBJCT_CDV,
 CFV_SBJCT_NM,
 SYS_ID,
 CTRY_CDV,
 CO_CDV,
 MKT_ID,
 ROW_CREATE_DTM,
 ROW_CREATE_USER_ID,
 ROW_LAST_UPDT_DTM,
 ROW_LAST_UPDT_USER_ID 
 )
 Select 
 CRU_ID,
 CRU_NM,
 SYS_ABRVTN_TXT,
 CFV_SBJCT_CDV,
 CFV_SBJCT_NM,
 SYS_ID,
 CTRY_CDV,
 CO_CDV,
 MKT_ID,
 ROW_CREATE_DTM,
 ROW_CREATE_USER_ID,
 ROW_LAST_UPDT_DTM,
 ROW_LAST_UPDT_USER_ID from CRU_CNTRL_ATRBT_TRNSPS_VT
WHERE CRU_ID IS NOT NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;
  

DEL FROM DWL_P_INTL_WORK.DW_EAME_ACCT_STG;

 .IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;
 
--EXEC PEPCMN_P.DT_PRM_RESET2 ('${DWSYS}', 'GTE_TPM_LOAD', 'DW_CHECKBOOK_FUND_DTL_CONV', 0);

--  .IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************populate data from EAME_SLS_ACCTG_DOC_HDR in ACQ to EAME_SLS_ACCTG_DOC_HDR_VT*****************/

INSERT INTO EAME_SLS_ACCTG_DOC_HDR_VT
(
      COMP_CODE,
      FISCVARNT,
      FISCPER,
      FISCVRNT_E,
      AC_LEDGER,
      AC_DOC_NR,
      AC_DOC_LN,
      RECTYPE,
      VERSION,
      AC_DOC_NO,
      FI_AWTYP,
      PSM_AWKEY,
      FI_DOCSTAT,
      AC_DOC_TYP,
      DOC_DATE,
      PSTNG_DATE,
      CREATEDON,
      REF_DOC_NO,
      LOC_CURRCY,
      DOC_CURRCY,
      RECORDMODE,
      FISCYEAR,
      FISCPER3,
      DOC_HD_TXT,
      REV_DOC_NO,
      BIC_ZGUPDDT,
      BIC_ZGBVORG,
      BIC_ZGDBBLG,
      BIC_ZGSTJAH,
      BIC_ZGKURSF,
      BIC_ZGPPNAM,
      BIC_ZGSNAME,
      BIC_ZGFRATH,
      BIC_ZGXSTOV,
      CURRENCY,
      CREA_TIME,
      AEDAT,
      CREATEDBY,
      BIC_ZGTCODE,
      BIC_ZGREINDAT,
      BIC_ZGAUGCP,
      BIC_ZGZUMSK,
      BIC_ZGKZBTR,
      BIC_ZGTXBHW,
      BIC_ZGTXBFW,
      BIC_ZGMWSTS,
      BIC_ZGWMWST,
      TAX_BAS_RC,
      TAX_BAS_TC,
      BIC_ZGHZUON,
      R_CURRENCY,
      INV_YEAR,
      INV_ITEM,
      OI_ERFMG,
      UNIT,
      OI_BPMNG,
      OI_BPRME,
      SP_GL_TT,
      AMOUNT,
      BIC_ZGPSWBT,
      G_L_CURRCY,
      BIC_ZGQSSHB,
      VALUE_DATE,
      ACCOUNT_RNM,
      BIC_ZGREBZG,
      BIC_ZGREBZT,
      ACCT_TYPE,
      CHRT_ACCTS,
      DW_SYS_ID,
      DW_LAST_UPDT_DTM,
      DW_STEP_ID,
      DW_BTCH_ID,
      GL_ACCOUNT,
      BIC_ZLIITMID,
      CLR_DOC_NO,
      DW_ITEM_ID_MATERIAL,
      OI_EBELN,
      OI_EBELP,
      DW_LOC_ID_PLANT,
      OI_MENGE,
      VALUE_LC,
      DW_VNDR_ID_VENDOR,
      BASE_UOM,
      FI_DBCRIND,
      REF_KEY3,
      PROFIT_CTR,
      CO_AREA,
      SP_GL_IND,
      BLINE_DATE,
      ALLOC_NMBR,
      CLEAR_DATE,
      POST_KEY,
      COUNTRY,
      ITEM_NUM,
      BUS_AREA,
      COSTELMNT,
      COSTCENTER,
      COORDER,
      WBS_ELEMT,
      POSTXT,
      DEB_CRE_DC,
      DEB_CRE_L2,
      LOC_CURRC2,
      DEBITOR,
      vk_vendor,
      DW_CUST_ID_DEBITOR

)
SELECT 
      COMP_CODE,
      FISCVARNT,
      FISCPER,
      FISCVRNT_E,
      AC_LEDGER,
      AC_DOC_NR,
      AC_DOC_LN,
      RECTYPE,
      VERSION,
      AC_DOC_NO,
      FI_AWTYP,
      PSM_AWKEY,
      FI_DOCSTAT,
      AC_DOC_TYP,
      DOC_DATE,
      PSTNG_DATE,
      CREATEDON,
      REF_DOC_NO,
      LOC_CURRCY,
      DOC_CURRCY,
      RECORDMODE,
      FISCYEAR,
      FISCPER3,
      DOC_HD_TXT,
      REV_DOC_NO,
      BIC_ZGUPDDT,
      BIC_ZGBVORG,
      BIC_ZGDBBLG,
      BIC_ZGSTJAH,
      BIC_ZGKURSF,
      BIC_ZGPPNAM,
      BIC_ZGSNAME,
      BIC_ZGFRATH,
      BIC_ZGXSTOV,
      CURRENCY,
      CREA_TIME,
      AEDAT,
      CREATEDBY,
      BIC_ZGTCODE,
      BIC_ZGREINDAT,
      BIC_ZGAUGCP,
      BIC_ZGZUMSK,
      BIC_ZGKZBTR,
      BIC_ZGTXBHW,
      BIC_ZGTXBFW,
      BIC_ZGMWSTS,
      BIC_ZGWMWST,
      TAX_BAS_RC,
      TAX_BAS_TC,
      BIC_ZGHZUON,
      R_CURRENCY,
      INV_YEAR,
      INV_ITEM,
      OI_ERFMG,
      UNIT,
      OI_BPMNG,
      OI_BPRME,
      SP_GL_TT,
      AMOUNT,
      BIC_ZGPSWBT,
      G_L_CURRCY,
      BIC_ZGQSSHB,
      VALUE_DATE,
      ACCOUNT_RNM,
      BIC_ZGREBZG,
      BIC_ZGREBZT,
      ACCT_TYPE,
      CHRT_ACCTS,
      DW_SYS_ID,
      DW_LAST_UPDT_DTM,
      DW_STEP_ID,
      DW_BTCH_ID,
      GL_ACCOUNT,
      BIC_ZLIITMID,
      CLR_DOC_NO,
      DW_ITEM_ID_MATERIAL,
      OI_EBELN,
      OI_EBELP,
      DW_LOC_ID_PLANT,
      OI_MENGE,
      VALUE_LC,
      DW_VNDR_ID_VENDOR,
      BASE_UOM,
      FI_DBCRIND,
      REF_KEY3,
      PROFIT_CTR,
      CO_AREA,
      SP_GL_IND,
      BLINE_DATE,
      ALLOC_NMBR,
      CLEAR_DATE,
      POST_KEY,
      COUNTRY,
      ITEM_NUM,
      BUS_AREA,
      COSTELMNT,
      COSTCENTER,
      COORDER,
      WBS_ELEMT,
      POSTXT,
      DEB_CRE_DC,
      DEB_CRE_L2,
      LOC_CURRC2,
      DEBITOR,
      vk_vendor,
      DW_CUST_ID_DEBITOR

  FROM ACQ_P.EAME_SLS_ACCTG_DOC_HDR DT_SLS_ACCTG
  LEFT OUTER JOIN
    (
        SELECT COALESCE(max(CTL_END_DTM),CAST('1900-01-01 00:00:00' AS TIMESTAMP(0))) CTL_END_DTM
        FROM PEPCMN_P.DT_PRM2
        WHERE STEP_ID IN
          (
                        SELECT STEP_ID
                        FROM PEPCMN_P.STEP
                        INNER JOIN PEPCMN_P.ACTVTY
                          ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID AND SYS_NM = '${DWSYS}' AND ACTVTY_NM = '${ACTIVITY}'
                        WHERE STEP_NM = '${STEP}'
          )
          AND SYS_ID = 0
)THIS_STEP_DATES ON 1=1

WHERE DT_SLS_ACCTG.AC_DOC_NO IS NOT NULL 
AND DT_SLS_ACCTG.DW_LAST_UPDT_DTM >= CTL_END_DTM;

  .IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

ET;

/************************************************************************************************************************************
BT, ET STANDS FOR BEGINING AND END OF TRANSACTION RESPECTIVELY AND ANY FAILURE WITHIN THIS BLOCK WILL ROLLBACK TO ITS PREVIOUS STATE
************************************************************************************************************************************/
BT;
/***************** ERROR HANDLING ********************************/
.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

COLLECT STATISTICS
	COLUMN (COMP_CODE ,AC_DOC_NO ,FISCYEAR), 
    COLUMN (CHRT_ACCTS ,DW_SYS_ID ,COSTELMNT),                  
    COLUMN (DW_SYS_ID ,OI_EBELN),
    COLUMN (DW_SYS_ID ,CO_AREA ,COSTCENTER),
    COLUMN (DW_SYS_ID ,PROFIT_CTR ,CO_AREA),
    COLUMN (OI_EBELN) ,
    COLUMN (COMP_CODE),
    COLUMN (REF_DOC_NO),
    COLUMN (WBS_ELEMT),
    COLUMN (REF_DOC_NO ,DW_SYS_ID),
    COLUMN (DW_SYS_ID ,WBS_ELEMT) 
ON  EAME_SLS_ACCTG_DOC_HDR_VT;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

ET;

/***************** ERROR HANDLING ********************************/
.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;
/*******************populate data from EAME_SLS_ACCTG_DOC_HDR in ACQ to DWL DW_EAME_ACCT_NUM_KEY in DWL Layer*****************/

/************************************************************************************************************************************
BT, ET STANDS FOR BEGINING AND END OF TRANSACTION RESPECTIVELY AND ANY FAILURE WITHIN THIS BLOCK WILL ROLLBACK TO ITS PREVIOUS STATE
************************************************************************************************************************************/
BT;
/***************** ERROR HANDLING ********************************/
.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;


/*******************populate data from EAME_SLS_ACCTG_DOC_HDR in ACQ to DWL DW_EAME_ACCT_NUM_KEY in DWL Layer*****************/

INSERT INTO DWL_P_INTL.DW_EAME_ACCT_NUM_KEY
(
DW_ACCT_DOC_ID,
SYS_ID,
AC_DOC_NO,
COMP_CODE,
FISCYEAR,
MSSNG_IND,
DW_BTCH_ID,
DW_STEP_ID,
DW_CRTD_DTM,
DW_UPTD_DTM
)

SELECT
CASE WHEN MX_PO_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM)
ELSE (MX_PO_ID+RW_NUM) END AS DW_ACCT_DOC_ID,
DT_SLS_ACCTG.DW_SYS_ID,
DT_SLS_ACCTG.AC_DOC_NO,
DT_SLS_ACCTG.COMP_CODE,
DT_SLS_ACCTG.FISCYEAR,
'N' AS MSSNG_IND,
MYBTCH_ID,
MYSTEP_ID,
CURRENT_TIMESTAMP(0) AS CRTD_DTM,
CURRENT_TIMESTAMP(0) AS UPTD_DTM
FROM
(
SELECT DISTINCT
DW_SYS_ID,
AC_DOC_NO,
COMP_CODE,
FISCYEAR,
MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM,
ROW_NUMBER() OVER(ORDER BY COMP_CODE, FISCYEAR,AC_DOC_NO)AS RW_NUM
FROM  EAME_SLS_ACCTG_DOC_HDR_VT
GROUP BY 1,2,3,4
)DT_SLS_ACCTG
CROSS JOIN
(SELECT COALESCE(MAX(DW_ACCT_DOC_ID),0) AS MX_PO_ID FROM DWL_P_INTL.DW_EAME_ACCT_NUM_KEY)MX_RWNUM
LEFT OUTER JOIN
DWL_P_INTL.DW_EAME_ACCT_NUM_KEY TGT_ACCT
ON
TGT_ACCT.SYS_ID = DT_SLS_ACCTG.DW_SYS_ID
AND TGT_ACCT.COMP_CODE = DT_SLS_ACCTG.COMP_CODE
AND TGT_ACCT.FISCYEAR = DT_SLS_ACCTG.FISCYEAR
AND TGT_ACCT.AC_DOC_NO= DT_SLS_ACCTG.AC_DOC_NO

AND DT_SLS_ACCTG.AC_DOC_NO IS NOT NULL

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE
      SYS.SYS_NM = '${DWSYS}' AND
      ACTVTY_NM = '${ACTIVITY}' AND
      STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
(SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID  WHERE TBL_NM='DW_EAME_ACCT_NUM_KEY' ) EDW_KEYSYS_ID 
ON 1=1

WHERE  TGT_ACCT.DW_ACCT_DOC_ID IS NULL;


.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************populate data from EAME_SLS_PO_DOC_ITEM in ACQ to DWL DW_EAME_PIV_NUM_KEY in DWL Layer*****************/

INSERT INTO DWL_P_INTL.DW_EAME_PIV_NUM_KEY
(
DW_PIV_ID,
SYS_ID,
BBP_INV_ID,
FISCYEAR,
MSSNG_IND,
DW_BTCH_ID,
DW_STEP_ID,
DW_CRTD_DTM,
DW_UPTD_DTM
)
SELECT
CASE WHEN MX_NUM_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM)
ELSE (MX_NUM_ID+RW_NUM) END AS DW_PIV_ID,
DT_SLS_ACCTG.DW_SYS_ID,
DT_SLS_ACCTG.BIC_ZGREBZG,
DT_SLS_ACCTG.INV_YEAR, 
'Y' AS MSSNG_IND,
MYBTCH_ID,
MYSTEP_ID,
(CURRENT_TIMESTAMP(0)) AS CRTD_DTM,
(CURRENT_TIMESTAMP(0)) AS UPTD_DTM
FROM
(
SELECT
DW_SYS_ID,
BIC_ZGREBZG ,
INV_YEAR,
MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM,
ROW_NUMBER() OVER(ORDER BY BIC_ZGREBZG,INV_YEAR)AS RW_NUM
FROM  EAME_SLS_ACCTG_DOC_HDR_VT
WHERE BIC_ZGREBZG IS NOT NULL AND INV_YEAR IS NOT NULL
GROUP BY 1,2,3
)DT_SLS_ACCTG
CROSS JOIN
(SELECT COALESCE(MAX(DW_PIV_ID),0) AS MX_NUM_ID FROM DWL_P_INTL.DW_EAME_PIV_NUM_KEY)MX_RWNUM
LEFT OUTER JOIN
DWL_P_INTL.DW_EAME_PIV_NUM_KEY TGT_NUM
ON TGT_NUM.BBP_INV_ID = DT_SLS_ACCTG.BIC_ZGREBZG 
AND TGT_NUM.FISCYEAR  = DT_SLS_ACCTG.INV_YEAR

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE
      SYS.SYS_NM = '${DWSYS}' AND
      ACTVTY_NM = '${ACTIVITY}' AND
      STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
(SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID  WHERE TBL_NM='DW_EAME_PIV_NUM_KEY' ) EDW_KEYSYS_ID 
ON 1=1
WHERE TGT_NUM.DW_PIV_ID IS NULL ;


.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************************New Surrogate Key logic begins here***************************************/

/*******************POPULATE DATA FROM EAME_SLS_ACCTG_DOC_HDR TO EAME_CC_KEY IN DWL LAYER*****************/
	
INSERT INTODWL_P_DRVD.EAME_CC_KEY
(
     DW_CC_ID
    ,CC_ID
    ,CNTRLNG_AREA_CDV
    ,SYS_ID
    ,MSSNG_IND
    ,DW_BTCH_ID
    ,DW_STEP_ID
    ,DW_CRTD_DTM
    ,DW_UPDT_DTM
)
SELECT
     CASE WHEN MX_KEY_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM) ELSE (MX_KEY_ID+RW_NUM) END AS DW_CC_ID
    ,DOC_HDR.CC_ID
    ,DOC_HDR.CNTRLNG_AREA_CDV
    ,DOC_HDR.SYS_ID
    ,'Y' AS MSSNG_IND
    ,MYBTCH_ID AS DW_BTCH_ID
    ,MYSTEP_ID AS DW_STEP_ID
    ,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
    ,CURRENT_TIMESTAMP(0) AS DW_UPDT_DTM
FROM
(
    SELECT
         COSTCENTER AS CC_ID
        ,CO_AREA    AS CNTRLNG_AREA_CDV
        ,DW_SYS_ID  AS SYS_ID
        ,MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM
        ,ROW_NUMBER() OVER(ORDER BY 1,2,3) AS RW_NUM
    FROM	EAME_SLS_ACCTG_DOC_HDR_VT
	WHERE COSTCENTER IS NOT NULL
    GROUP BY 1,2,3
)DOC_HDR

LEFT OUTER JOIN
    (
    SELECT COALESCE(MAX(DW_CC_ID),0) AS MX_KEY_ID 
    FROMDWL_P_DRVD.EAME_CC_KEY CC_KEY
    ) AS MX_RWNUM
  ON 1=1    

LEFT OUTER JOIN	DWL_P_DRVD.EAME_CC_KEY CC_KEY
ON	CC_KEY.CC_ID            = DOC_HDR.CC_ID
AND	CC_KEY.CNTRLNG_AREA_CDV = DOC_HDR.CNTRLNG_AREA_CDV
AND	CC_KEY.SYS_ID           = DOC_HDR.SYS_ID

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE 	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
    (
    SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID
    WHERE TBL_NM='EAME_CC_KEY' 
    ) AS EDW_KEYSYS_ID 
ON 1=1
   
WHERE CC_KEY.DW_CC_ID IS NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************POPULATE DATA FROM EAME_SLS_ACCTG_DOC_HDR TO EAME_GLA_KEY IN DWL LAYER*****************/

INSERT INTO DWL_P_INTL.EAME_GLA_KEY 
(
     DW_GLA_ID                     
    ,GLA_ID                        
    ,COA_ID  
    ,SYS_ID     
    ,MSSNG_IND                     
    ,DW_BTCH_ID                    
    ,DW_STEP_ID                    
    ,DW_CRTD_DTM                   
    ,DW_UPDT_DTM                   
)
SELECT
     CASE WHEN MX_KEY_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM) ELSE (MX_KEY_ID+RW_NUM) END AS DW_GLA_ID
    ,DOC_HDR.GLA_ID
    ,DOC_HDR.COA_ID
    ,DOC_HDR.SYS_ID
    ,'Y' AS MSSNG_IND
    ,MYBTCH_ID AS DW_BTCH_ID
    ,MYSTEP_ID AS DW_STEP_ID
    ,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
    ,CURRENT_TIMESTAMP(0) AS DW_UPDT_DTM
FROM
(
    SELECT
         COSTELMNT  AS GLA_ID
        ,CHRT_ACCTS AS COA_ID
        ,DW_SYS_ID  AS SYS_ID
        ,MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM
        ,ROW_NUMBER() OVER(ORDER BY 1,2,3) AS RW_NUM
    FROM	EAME_SLS_ACCTG_DOC_HDR_VT
	WHERE COSTELMNT IS NOT NULL
    GROUP BY 1,2,3
)DOC_HDR

LEFT OUTER JOIN
    (
    SELECT COALESCE(MAX(DW_GLA_ID),0) AS MX_KEY_ID 
    FROM DWL_P_INTL.EAME_GLA_KEY GLA_KEY
    ) AS MX_RWNUM
  ON 1=1    

LEFT OUTER JOIN	DWL_P_INTL.EAME_GLA_KEY GLA_KEY
ON 	GLA_KEY.GLA_ID           = DOC_HDR.GLA_ID
AND	GLA_KEY.COA_ID           = DOC_HDR.COA_ID
AND	GLA_KEY.SYS_ID           = DOC_HDR.SYS_ID

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
    (
    SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID
    WHERE TBL_NM='EAME_GLA_KEY' 
    ) AS EDW_KEYSYS_ID 
ON 1=1
   
WHERE GLA_KEY.DW_GLA_ID IS NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************POPULATE DATA FROM EAME_SLS_ACCTG_DOC_HDR TO EAME_PCNTR_KEY IN DWL LAYER*****************/

INSERT INTO  DWL_P_INTL.EAME_PCNTR_KEY 
(
 DW_PCNTR_ID
,SYS_ID
,PCNTR_ID
,CNTRLNG_AREA_CDV
,MSSNG_IND
,DW_BTCH_ID
,DW_STEP_ID
,DW_CRTD_DTM
,DW_UPDT_DTM
)
SELECT 
     CASE WHEN MX_KEY_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM) ELSE (MX_KEY_ID+RW_NUM) END  AS DW_PCNTR_ID
    ,DOC_HDR.SYS_ID
    ,DOC_HDR.PCNTR_ID
    ,DOC_HDR.CNTRLNG_AREA_CDV
    ,'Y' AS MSSNG_IND
    ,MYBTCH_ID AS DW_BTCH_ID 
	,MYSTEP_ID AS DW_STEP_ID
    ,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
    ,CURRENT_TIMESTAMP(0) AS DW_UPDT_DTM
FROM
( 
	SELECT
		 DW_SYS_ID AS SYS_ID
        ,PROFIT_CTR AS PCNTR_ID
        ,CO_AREA AS CNTRLNG_AREA_CDV
        ,MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM
        ,ROW_NUMBER() OVER(ORDER BY 1,2,3) RW_NUM
	FROM EAME_SLS_ACCTG_DOC_HDR_VT
	WHERE PROFIT_CTR IS NOT NULL
	GROUP BY 1,2,3
) DOC_HDR

LEFT OUTER JOIN
	(
	SELECT COALESCE(MAX(DW_PCNTR_ID),0) AS MX_KEY_ID 
    FROM DWL_P_INTL.EAME_PCNTR_KEY
	) AS MX_RWNUM
  ON 1=1
  
LEFT OUTER JOIN DWL_P_INTL.EAME_PCNTR_KEY PCNTR_KEY
  ON PCNTR_KEY.PCNTR_ID          = DOC_HDR.PCNTR_ID
 AND PCNTR_KEY.CNTRLNG_AREA_CDV  = DOC_HDR.CNTRLNG_AREA_CDV
 AND PCNTR_KEY.SYS_ID            = DOC_HDR.SYS_ID  
  
LEFT OUTER JOIN
          (SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
           FROM  PEPCMN_P.STEP
           INNER JOIN PEPCMN_P.ACTVTY
              ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
           INNER JOIN PEPCMN_P.SYS
              ON SYS.SYS_NM = ACTVTY.SYS_NM
           WHERE SYS.SYS_NM = '${DWSYS}' 
             AND ACTVTY_NM = '${ACTIVITY}' 
             AND STEP_NM = '${STEP}'
          ) THIS_STEP ON 1=1

LEFT OUTER JOIN
    (
    SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID
    WHERE TBL_NM='EAME_PCNTR_KEY' 
    ) AS EDW_KEYSYS_ID 
ON 1=1

WHERE PCNTR_KEY.DW_PCNTR_ID IS NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************POPULATE DATA FROM EAME_SLS_ACCTG_DOC_HDR TO EAME_PRJCT_TSK_KEY IN DWL LAYER*****************/
	
INSERT INTO DWL_P_INTL.EAME_PRJCT_TSK_KEY
(
     DW_PRJCT_TSK_ID
    ,WBS_ELEMT
    ,SYS_ID
    ,MSSNG_IND
    ,DW_BTCH_ID
    ,DW_STEP_ID
    ,DW_CRTD_DTM
    ,DW_UPDT_DTM
)
SELECT
     CASE WHEN MX_KEY_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM) ELSE (MX_KEY_ID+RW_NUM) END AS DW_PRJCT_TSK_ID
    ,DOC_HDR.WBS_ELEMT
    ,DOC_HDR.SYS_ID
    ,'Y' AS MSSNG_IND
    ,MYBTCH_ID AS DW_BTCH_ID
    ,MYSTEP_ID AS DW_STEP_ID
    ,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
    ,CURRENT_TIMESTAMP(0) AS DW_UPDT_DTM
FROM
(
    SELECT
         WBS_ELEMT AS WBS_ELEMT
        ,DW_SYS_ID  AS SYS_ID
        ,MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM
        ,ROW_NUMBER() OVER(ORDER BY 1,2) AS RW_NUM
    FROM	EAME_SLS_ACCTG_DOC_HDR_VT
	WHERE WBS_ELEMT IS NOT NULL
    GROUP BY 1,2
)DOC_HDR

LEFT OUTER JOIN
    (
    SELECT COALESCE(MAX(DW_PRJCT_TSK_ID),0) AS MX_KEY_ID 
    FROM DWL_P_INTL.EAME_PRJCT_TSK_KEY PRJCT_TSK_KEY
    ) AS MX_RWNUM
  ON 1=1    

LEFT OUTER JOIN	DWL_P_INTL.EAME_PRJCT_TSK_KEY PRJCT_TSK_KEY
ON	PRJCT_TSK_KEY.WBS_ELEMT        = DOC_HDR.WBS_ELEMT
AND	PRJCT_TSK_KEY.SYS_ID           = DOC_HDR.SYS_ID

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE 	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
    (
    SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID
    WHERE TBL_NM='EAME_PRJCT_TSK_KEY' 
    ) AS EDW_KEYSYS_ID 
ON 1=1
   
WHERE PRJCT_TSK_KEY.DW_PRJCT_TSK_ID IS NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************POPULATE DATA FROM EAME_SLS_ACCTG_DOC_HDR TO EAME_PDOC_KEY IN DWL LAYER*****************/
	
INSERT INTO DWL_P_INTL.EAME_PDOC_KEY
(
     DW_PDOC_ID
    ,DOC_NUM
    ,SYS_ID
    ,MSSNG_IND
    ,DW_BTCH_ID
    ,DW_STEP_ID
    ,DW_CRTD_DTM
    ,DW_UPDT_DTM
)
SELECT
     CASE WHEN MX_KEY_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM) ELSE (MX_KEY_ID+RW_NUM) END AS DW_PDOC_ID
    ,DOC_HDR.DOC_NUM
    ,DOC_HDR.SYS_ID
    ,'Y' AS MSSNG_IND
    ,MYBTCH_ID AS DW_BTCH_ID
    ,MYSTEP_ID AS DW_STEP_ID
    ,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
    ,CURRENT_TIMESTAMP(0) AS DW_UPDT_DTM
FROM
(
    SELECT
         OI_EBELN AS DOC_NUM
        ,DW_SYS_ID  AS SYS_ID
        ,MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM
        ,ROW_NUMBER() OVER(ORDER BY 1,2) AS RW_NUM
    FROM	EAME_SLS_ACCTG_DOC_HDR_VT
	WHERE OI_EBELN IS NOT NULL
    GROUP BY 1,2
)DOC_HDR

LEFT OUTER JOIN
    (
    SELECT COALESCE(MAX(DW_PDOC_ID),0) AS MX_KEY_ID 
    FROM DWL_P_INTL.EAME_PDOC_KEY PDOC_KEY
    ) AS MX_RWNUM
  ON 1=1    

LEFT OUTER JOIN	DWL_P_INTL.EAME_PDOC_KEY PDOC_KEY
ON	PDOC_KEY.DOC_NUM          = DOC_HDR.DOC_NUM
AND	PDOC_KEY.SYS_ID           = DOC_HDR.SYS_ID

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE 	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
    (
    SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID
    WHERE TBL_NM='EAME_PDOC_KEY' 
    ) AS EDW_KEYSYS_ID 
ON 1=1
   
WHERE PDOC_KEY.DW_PDOC_ID IS NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************POPULATE DATA FROM EAME_SLS_ACCTG_DOC_HDR TO EAME_CUST_ORDR_KEY IN DWL LAYER*****************/
	
INSERT INTO DWL_P_INTL.EAME_CUST_ORDR_KEY
(
     DW_CUST_ORDR_ID
    ,DOC_NUM
    ,SYS_ID
    ,MSSNG_IND
    ,DW_BTCH_ID
    ,DW_STEP_ID
    ,DW_CRTD_DTM
    ,DW_UPDT_DTM
)
SELECT
     CASE WHEN MX_KEY_ID=0 THEN (EDW_KEYSYS_ID.KEY_ROW+RW_NUM) ELSE (MX_KEY_ID+RW_NUM) END AS DW_CUST_ORDR_ID
    ,DOC_HDR.DOC_NUM
    ,DOC_HDR.SYS_ID
    ,'Y' AS MSSNG_IND
    ,MYBTCH_ID AS DW_BTCH_ID
    ,MYSTEP_ID AS DW_STEP_ID
    ,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
    ,CURRENT_TIMESTAMP(0) AS DW_UPDT_DTM
FROM
(
    SELECT
         REF_DOC_NO AS DOC_NUM
        ,DW_SYS_ID  AS SYS_ID
        ,MAX(DW_LAST_UPDT_DTM) AS MX_UPDT_DTM
        ,ROW_NUMBER() OVER(ORDER BY 1,2) AS RW_NUM
    FROM	EAME_SLS_ACCTG_DOC_HDR_VT
	WHERE REF_DOC_NO IS NOT NULL
    GROUP BY 1,2
)DOC_HDR

LEFT OUTER JOIN
    (
    SELECT COALESCE(MAX(DW_CUST_ORDR_ID),0) AS MX_KEY_ID 
    FROM DWL_P_INTL.EAME_CUST_ORDR_KEY CUST_ORDR_KEY
    ) AS MX_RWNUM
  ON 1=1    

LEFT OUTER JOIN	DWL_P_INTL.EAME_CUST_ORDR_KEY CUST_ORDR_KEY
ON	CUST_ORDR_KEY.DOC_NUM          = DOC_HDR.DOC_NUM
AND	CUST_ORDR_KEY.SYS_ID           = DOC_HDR.SYS_ID

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE 	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1

LEFT OUTER JOIN
    (
    SELECT  (SYSKEY_ID*MLTPLR_NUM) KEY_ROW  FROM DWL_P.EDW_KEYSYS_ID
    WHERE TBL_NM='EAME_CUST_ORDR_KEY' 
    ) AS EDW_KEYSYS_ID 
ON 1=1
   
WHERE CUST_ORDR_KEY.DW_CUST_ORDR_ID IS NULL;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******************************New Surrogate Key logic ends here***************************************/

/*******************POPULATE DATA FROM ACQ AND MDM TO DW_EAME_ACCT_STG IN DWL LAYER*****************/

INSERT INTO DWL_P_INTL_WORK.DW_EAME_ACCT_STG
(
 DW_ACCT_DOC_ID
,DW_ACCT_LN_SEQ_NUM

/*****New surrogate keys*****/
,DW_CC_ID
,DW_GLA_ID
,DW_PCNTR_ID
,DW_PRJCT_TSK_ID
,DW_PDOC_ID
,DW_CUST_ORDR_ID
/****************************/

,AC_DOC_NO
,AC_DOC_LN
,DOC_DATE
,AC_LEDGER
,CRU_ID
,PSTNG_DATE
,FISCVARNT
,FISCYEAR
,FISCPER
,AC_DOC_NR
,PSM_AWKEY
,AC_DOC_TYP
,REV_DOC_NO
,BIC_ZGSTJAH
,BIC_ZGSNAME
,FI_DOCSTAT
,DOC_CURRCY
,LOC_CURRCY
,AMOUNT
,DW_PIV_ID
,INV_ITEM
,INV_YEAR
,OI_ERFMG
,OI_BPMNG
,UNIT
,OI_BPRME
,CREATED_BY
,CREATEDON
,SYS_ID
,BIC_ZLIITMID
,GL_ACCOUNT
,OI_EBELN
,OI_EBELP
,CLR_DOC_NO
,OI_MENGE
,VALUE_LC
--,BIC_ZZMATERIAL
,FI_DBCRIND
,DW_LOC_ID
,DW_VNDR_ID_VENDOR
,DW_ITEM_ID_MATERIAL
,DW_BTCH_ID
,DW_STEP_ID
,DW_CRTD_DTM
,DW_UPTD_DTM
,IUD_FLAG
,ALLOC_NMBR
,PROFIT_CTR
,COSTCENTER
,POSTXT
,COORDER
,COSTELMNT
,WBS_ELEMT
,ACCOUNT_RNM
,ACCT_TYPE
,AEDAT
,BASE_UOM
,BIC_ZGAUGCP
,BIC_ZGBVORG
,BIC_ZGDBBLG
,BIC_ZGFRATH
,BIC_ZGHZUON
,BIC_ZGKURSF
,BIC_ZGKZBTR
,BIC_ZGMWSTS
,BIC_ZGPPNAM
,BIC_ZGPSWBT
,BIC_ZGQSSHB
,BIC_ZGREBZG
,BIC_ZGREBZT
,BIC_ZGREINDAT
,BIC_ZGTCODE
,BIC_ZGTXBFW
,BIC_ZGTXBHW
,BIC_ZGUPDDT
,BIC_ZGWMWST
,BIC_ZGXSTOV
,BIC_ZGZUMSK
,BLINE_DATE
,BUS_AREA
,CHRT_ACCTS
,CLEAR_DATE
,CO_AREA
,COMP_CODE
,COUNTRY
,CREA_TIME
,CURRENCY
,DOC_HD_TXT
,FI_AWTYP
,FISCPER3
,G_L_CURRCY
,ITEM_NUM
,POST_KEY
,R_CURRENCY
,RECORDMODE
,REF_DOC_NO
,REF_KEY3
,SP_GL_IND
,SP_GL_TT
,TAX_BAS_RC
,TAX_BAS_TC
,VALUE_DATE
,FISCVRNT_E
,RECTYPE
,VERSION
,DEBITOR
,VENDOR
,DW_CUST_ID_DEBITOR

--,DEB_CRE_DC 
--,DEB_CRE_L2 
--,LOC_CURRC2 
)
SELECT
distinct
 ACCT_NUM_KEY.DW_ACCT_DOC_ID
, CAST(ACCTG_DOC_HDR.AC_DOC_LN AS INTEGER) AS DW_ACCT_LN_SEQ_NUM

/***New Surrogate key fields are replaced from '-999' to actual values from transactions****/
,CC_KEY.DW_CC_ID
,GLA_KEY.DW_GLA_ID
,PCNTR_KEY.DW_PCNTR_ID
,PRJCT_TSK_KEY.DW_PRJCT_TSK_ID
,PDOC_KEY.DW_PDOC_ID
,CUST_ORDR_KEY.DW_CUST_ORDR_ID
/*******************************************************************************************/

,ACCTG_DOC_HDR.AC_DOC_NO
,CAST(ACCTG_DOC_HDR.AC_DOC_LN AS INTEGER) AS AC_DOC_LN
,ACCTG_DOC_HDR.DOC_DATE
,ACCTG_DOC_HDR.AC_LEDGER
, CRU.CRU_ID
--ACCTG_DOC_HDR.COMP_CODE,--not there in tgt table
, ACCTG_DOC_HDR.PSTNG_DATE
,ACCTG_DOC_HDR.FISCVARNT
,ACCTG_DOC_HDR.FISCYEAR
,CAST(ACCTG_DOC_HDR.FISCPER AS VARCHAR(10)) AS FISCPER
,ACCTG_DOC_HDR.AC_DOC_NR
,ACCTG_DOC_HDR.PSM_AWKEY
,ACCTG_DOC_HDR.AC_DOC_TYP
,CASE WHEN ACCTG_DOC_HDR.REV_DOC_NO IS NULL THEN (CAST(-1*ACCTG_DOC_HDR.DW_SYS_ID AS VARCHAR(10))) ELSE CAST(ACCTG_DOC_HDR.REV_DOC_NO AS VARCHAR(10)) END AS REV_DOC_NO
,CAST(ACCTG_DOC_HDR.BIC_ZGSTJAH AS VARCHAR(4)) AS BIC_ZGSTJAH
,ACCTG_DOC_HDR.BIC_ZGSNAME
,ACCTG_DOC_HDR.FI_DOCSTAT
,ACCTG_DOC_HDR.DOC_CURRCY
,ACCTG_DOC_HDR.LOC_CURRCY
,ACCTG_DOC_HDR.AMOUNT
,PIV.DW_PIV_ID
,ACCTG_DOC_HDR.INV_ITEM
,ACCTG_DOC_HDR.INV_YEAR
,ACCTG_DOC_HDR.OI_ERFMG
,ACCTG_DOC_HDR.OI_BPMNG
,ACCTG_DOC_HDR.UNIT
,ACCTG_DOC_HDR.OI_BPRME
,ACCTG_DOC_HDR.CREATEDBY
,ACCTG_DOC_HDR.CREATEDON
,ACCTG_DOC_HDR.DW_SYS_ID
,ACCTG_DOC_HDR.BIC_ZLIITMID
,ACCTG_DOC_HDR.GL_ACCOUNT
,ACCTG_DOC_HDR.OI_EBELN
,ACCTG_DOC_HDR.OI_EBELP
,ACCTG_DOC_HDR.CLR_DOC_NO
,ACCTG_DOC_HDR.OI_MENGE
,ACCTG_DOC_HDR.VALUE_LC
--ACCTG_DOC_HDR.BIC_ZZMATERIAL,
--NULL,
,ACCTG_DOC_HDR.FI_DBCRIND
,ACCTG_DOC_HDR.DW_LOC_ID_PLANT
,ACCTG_DOC_HDR.DW_VNDR_ID_VENDOR
,ACCTG_DOC_HDR.DW_ITEM_ID_MATERIAL
,MYBTCH_ID AS DW_BTCH_ID
,MYSTEP_ID AS DW_STEP_ID
,CURRENT_TIMESTAMP(0) AS DW_CRTD_DTM
,CURRENT_TIMESTAMP(0) AS DW_UPTD_DTM
,NULL
,ACCTG_DOC_HDR.ALLOC_NMBR
,ACCTG_DOC_HDR.PROFIT_CTR
,ACCTG_DOC_HDR.COSTCENTER
,ACCTG_DOC_HDR.POSTXT
,ACCTG_DOC_HDR.COORDER
,ACCTG_DOC_HDR.COSTELMNT
,ACCTG_DOC_HDR.WBS_ELEMT
,ACCTG_DOC_HDR.ACCOUNT_RNM
,ACCTG_DOC_HDR.ACCT_TYPE
,ACCTG_DOC_HDR.AEDAT
,ACCTG_DOC_HDR.BASE_UOM
,ACCTG_DOC_HDR.BIC_ZGAUGCP
,ACCTG_DOC_HDR.BIC_ZGBVORG
,ACCTG_DOC_HDR.BIC_ZGDBBLG
,ACCTG_DOC_HDR.BIC_ZGFRATH
,ACCTG_DOC_HDR.BIC_ZGHZUON
,ACCTG_DOC_HDR.BIC_ZGKURSF
,ACCTG_DOC_HDR.BIC_ZGKZBTR
,ACCTG_DOC_HDR.BIC_ZGMWSTS
,ACCTG_DOC_HDR.BIC_ZGPPNAM
,ACCTG_DOC_HDR.BIC_ZGPSWBT
,ACCTG_DOC_HDR.BIC_ZGQSSHB
,ACCTG_DOC_HDR.BIC_ZGREBZG
,ACCTG_DOC_HDR.BIC_ZGREBZT
,ACCTG_DOC_HDR.BIC_ZGREINDAT
,ACCTG_DOC_HDR.BIC_ZGTCODE
,ACCTG_DOC_HDR.BIC_ZGTXBFW
,ACCTG_DOC_HDR.BIC_ZGTXBHW
,ACCTG_DOC_HDR.BIC_ZGUPDDT
,ACCTG_DOC_HDR.BIC_ZGWMWST
,ACCTG_DOC_HDR.BIC_ZGXSTOV
,ACCTG_DOC_HDR.BIC_ZGZUMSK
,ACCTG_DOC_HDR.BLINE_DATE
,ACCTG_DOC_HDR.BUS_AREA
,ACCTG_DOC_HDR.CHRT_ACCTS
,ACCTG_DOC_HDR.CLEAR_DATE
,ACCTG_DOC_HDR.CO_AREA
,ACCTG_DOC_HDR.COMP_CODE
,ACCTG_DOC_HDR.COUNTRY
,ACCTG_DOC_HDR.CREA_TIME
,ACCTG_DOC_HDR.CURRENCY
,ACCTG_DOC_HDR.DOC_HD_TXT
,ACCTG_DOC_HDR.FI_AWTYP
,ACCTG_DOC_HDR.FISCPER3
,ACCTG_DOC_HDR.G_L_CURRCY
,ACCTG_DOC_HDR.ITEM_NUM
,ACCTG_DOC_HDR.POST_KEY
,ACCTG_DOC_HDR.R_CURRENCY
,ACCTG_DOC_HDR.RECORDMODE
,ACCTG_DOC_HDR.REF_DOC_NO
,ACCTG_DOC_HDR.REF_KEY3
,ACCTG_DOC_HDR.SP_GL_IND
,ACCTG_DOC_HDR.SP_GL_TT
,ACCTG_DOC_HDR.TAX_BAS_RC
,ACCTG_DOC_HDR.TAX_BAS_TC
,ACCTG_DOC_HDR.VALUE_DATE
,ACCTG_DOC_HDR.FISCVRNT_E
,ACCTG_DOC_HDR.RECTYPE
,ACCTG_DOC_HDR.VERSION
,ACCTG_DOC_HDR.DEBITOR
,ACCTG_DOC_HDR.vk_vendor
,ACCTG_DOC_HDR.DW_CUST_ID_DEBITOR

--,ACCTG_DOC_HDR.DEB_CRE_DC 
--,ACCTG_DOC_HDR.DEB_CRE_L2 
--,ACCTG_DOC_HDR.LOC_CURRC2

FROM EAME_SLS_ACCTG_DOC_HDR_VT ACCTG_DOC_HDR

INNER JOIN	DWL_P_INTL.DW_EAME_ACCT_NUM_KEY ACCT_NUM_KEY 
	ON  ACCTG_DOC_HDR.COMP_CODE = ACCT_NUM_KEY.COMP_CODE
	AND ACCTG_DOC_HDR.FISCYEAR = ACCT_NUM_KEY.FISCYEAR
	AND ACCTG_DOC_HDR.AC_DOC_NO = ACCT_NUM_KEY.AC_DOC_NO
			
LEFT OUTER JOINDWL_P_DRVD.EAME_CC_KEY AS CC_KEY
	ON  ACCTG_DOC_HDR.COSTCENTER  = CC_KEY.CC_ID
	AND ACCTG_DOC_HDR.DW_SYS_ID  = CC_KEY.SYS_ID
	AND ACCTG_DOC_HDR.CO_AREA    = CC_KEY.CNTRLNG_AREA_CDV

LEFT OUTER JOIN DWL_P_INTL.EAME_GLA_KEY AS GLA_KEY
	ON  ACCTG_DOC_HDR.COSTELMNT  = GLA_KEY.GLA_ID
	AND ACCTG_DOC_HDR.DW_SYS_ID  = GLA_KEY.SYS_ID
	AND ACCTG_DOC_HDR.CHRT_ACCTS = GLA_KEY.COA_ID
  
LEFT OUTER JOIN DWL_P_INTL.EAME_PCNTR_KEY AS PCNTR_KEY
	ON  ACCTG_DOC_HDR.PROFIT_CTR = PCNTR_KEY.PCNTR_ID
	AND ACCTG_DOC_HDR.DW_SYS_ID  = PCNTR_KEY.SYS_ID
	AND ACCTG_DOC_HDR.CO_AREA    = PCNTR_KEY.CNTRLNG_AREA_CDV

LEFT OUTER JOIN DWL_P_INTL.EAME_PRJCT_TSK_KEY AS PRJCT_TSK_KEY
	ON  ACCTG_DOC_HDR.WBS_ELEMT = PRJCT_TSK_KEY.WBS_ELEMT
	AND ACCTG_DOC_HDR.DW_SYS_ID  = PRJCT_TSK_KEY.SYS_ID

LEFT OUTER JOIN DWL_P_INTL.EAME_PDOC_KEY AS PDOC_KEY
	ON  ACCTG_DOC_HDR.OI_EBELN  = PDOC_KEY.DOC_NUM
	AND ACCTG_DOC_HDR.DW_SYS_ID  = PDOC_KEY.SYS_ID
  
LEFT OUTER JOIN DWL_P_INTL.EAME_CUST_ORDR_KEY AS CUST_ORDR_KEY
	ON  ACCTG_DOC_HDR.REF_DOC_NO = CUST_ORDR_KEY.DOC_NUM
	AND ACCTG_DOC_HDR.DW_SYS_ID  = CUST_ORDR_KEY.SYS_ID
  
LEFT OUTER JOIN	DWL_P_INTL.DW_EAME_PIV_NUM_KEY PIV
	ON ACCTG_DOC_HDR.BIC_ZGREBZG = PIV.BBP_INV_ID 
	AND ACCTG_DOC_HDR.INV_YEAR  = PIV.FISCYEAR

INNER JOIN	(SELECT * FROM DWL_P.CRU_CNTRL_ATRBT_TRNSPS_V WHERE SYS_ID=6) CRU
			ON ACCTG_DOC_HDR.COMP_CODE = CRU.CO_CDV

LEFT OUTER JOIN
  (
    SELECT MAX(ACTVTY.CUR_BTCH_ID) AS MYBTCH_ID, MAX(STEP.STEP_ID) AS MYSTEP_ID
    FROM PEPCMN_P.STEP
    INNER JOIN PEPCMN_P.ACTVTY
      ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
    INNER JOIN PEPCMN_P.SYS
      ON SYS.SYS_NM = ACTVTY.SYS_NM
    WHERE
      SYS.SYS_NM = '${DWSYS}' AND
      ACTVTY_NM = '${ACTIVITY}' AND
      STEP_NM = '${STEP}'
  ) THIS_STEP ON 1=1
;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/*******UPDATING MISSING INDICATOR *******/

UPDATE DWL_P_INTL.DW_EAME_ACCT_NUM_KEY
FROM 
(SELECT DISTINCT DW_ACCT_DOC_ID FROM DWL_P_INTL_WORK.DW_EAME_ACCT_STG) ACCT
SET MSSNG_IND='N'
WHERE DWL_P_INTL.DW_EAME_ACCT_NUM_KEY.DW_ACCT_DOC_ID =ACCT.DW_ACCT_DOC_ID ;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;


/**********WE UPSERT THE STAGE(DW_EAME_ACCT_STG) TABLE INTO THE TARGET(EAME_ACCT) TABLE USING NATURAL FACT PK*******/
UPDATE DWL_P_INTL.EAME_ACCT
FROM DWL_P_INTL_WORK.DW_EAME_ACCT_STG AS ACCT_STG
SET
 AC_DOC_NO              =   ACCT_STG.AC_DOC_NO
,AC_DOC_LN              =   ACCT_STG.AC_DOC_LN
/*******New Surrogate Key updates**********/
,DW_CC_ID				=   ACCT_STG.DW_CC_ID
,DW_GLA_ID				=   ACCT_STG.DW_GLA_ID
,DW_PCNTR_ID			=   ACCT_STG.DW_PCNTR_ID
,DW_PRJCT_TSK_ID		=   ACCT_STG.DW_PRJCT_TSK_ID
,DW_PDOC_ID				=   ACCT_STG.DW_PDOC_ID
,DW_CUST_ORDR_ID		=   ACCT_STG.DW_CUST_ORDR_ID
/******************************************/
,AC_LEDGER              =   ACCT_STG.AC_LEDGER
,DOC_DATE               =   ACCT_STG.DOC_DATE
,FISCVARNT              =   ACCT_STG.FISCVARNT
,FISCYEAR				=   ACCT_STG.FISCYEAR
,AC_DOC_NR              =   ACCT_STG.AC_DOC_NR
,PSM_AWKEY              =   ACCT_STG.PSM_AWKEY
,AC_DOC_TYP             =   ACCT_STG.AC_DOC_TYP
,REV_DOC_NO             =   ACCT_STG.REV_DOC_NO
,BIC_ZGSTJAH            =   ACCT_STG.BIC_ZGSTJAH
,BIC_ZGSNAME            =   ACCT_STG.BIC_ZGSNAME
,FI_DOCSTAT             =   ACCT_STG.FI_DOCSTAT
,DOC_CURRCY             =   ACCT_STG.DOC_CURRCY
,LOC_CURRCY             =   ACCT_STG.LOC_CURRCY
,AMOUNT                 =   ACCT_STG.AMOUNT
,DW_PIV_ID              =   ACCT_STG.DW_PIV_ID
,INV_ITEM               =   ACCT_STG.INV_ITEM
,INV_YEAR               =   ACCT_STG.INV_YEAR
,OI_ERFMG               =   ACCT_STG.OI_ERFMG
,OI_BPMNG               =   ACCT_STG.OI_BPMNG
,UNIT                   =   ACCT_STG.UNIT
,OI_BPRME               =   ACCT_STG.OI_BPRME
,CREATED_BY             =   ACCT_STG.CREATED_BY
,CREATEDON              =   ACCT_STG.CREATEDON
,SYS_ID                 =   ACCT_STG.SYS_ID
,BIC_ZLIITMID			=	ACCT_STG.BIC_ZLIITMID
,GL_ACCOUNT				=	ACCT_STG.GL_ACCOUNT
,OI_EBELN				=	ACCT_STG.OI_EBELN
,OI_EBELP				=	ACCT_STG.OI_EBELP
,CLR_DOC_NO				=	ACCT_STG.CLR_DOC_NO
,OI_MENGE				=	ACCT_STG.OI_MENGE
,VALUE_LC				=	ACCT_STG.VALUE_LC
--,BIC_ZZMATERIAL	=	ACCT_STG.BIC_ZZMATERIAL
,FI_DBCRIND				=	ACCT_STG.FI_DBCRIND
,DW_LOC_ID				=	ACCT_STG.DW_LOC_ID
,DW_VNDR_ID_VENDOR		=	ACCT_STG.DW_VNDR_ID_VENDOR
,DW_ITEM_ID_MATERIAL	=	ACCT_STG.DW_ITEM_ID_MATERIAL
,DW_BTCH_ID             =   ACCT_STG.DW_BTCH_ID                   
,DW_STEP_ID             =   ACCT_STG.DW_STEP_ID 
--,DW_CRTD_DTM            =   ACCT_STG.DW_CRTD_DTM
,DW_UPTD_DTM            =   ACCT_STG.DW_UPTD_DTM
,ALLOC_NMBR             =   ACCT_STG.ALLOC_NMBR             
,PROFIT_CTR             =   ACCT_STG.PROFIT_CTR             
,COSTCENTER             =   ACCT_STG.COSTCENTER             
,POSTXT                 =   ACCT_STG.POSTXT                 
,COORDER                =   ACCT_STG.COORDER                
,COSTELMNT              =   ACCT_STG.COSTELMNT              
,WBS_ELEMT              =   ACCT_STG.WBS_ELEMT              
,ACCOUNT_RNM            =   ACCT_STG.ACCOUNT_RNM            
,ACCT_TYPE              =   ACCT_STG.ACCT_TYPE              
,AEDAT                  =   ACCT_STG.AEDAT                  
,BASE_UOM               =   ACCT_STG.BASE_UOM               
,BIC_ZGAUGCP            =   ACCT_STG.BIC_ZGAUGCP            
,BIC_ZGBVORG            =   ACCT_STG.BIC_ZGBVORG            
,BIC_ZGDBBLG            =   ACCT_STG.BIC_ZGDBBLG            
,BIC_ZGFRATH            =   ACCT_STG.BIC_ZGFRATH            
,BIC_ZGHZUON            =   ACCT_STG.BIC_ZGHZUON            
,BIC_ZGKURSF            =   ACCT_STG.BIC_ZGKURSF            
,BIC_ZGKZBTR            =   ACCT_STG.BIC_ZGKZBTR            
,BIC_ZGMWSTS            =   ACCT_STG.BIC_ZGMWSTS            
,BIC_ZGPPNAM            =   ACCT_STG.BIC_ZGPPNAM            
,BIC_ZGPSWBT            =   ACCT_STG.BIC_ZGPSWBT            
,BIC_ZGQSSHB            =   ACCT_STG.BIC_ZGQSSHB            
,BIC_ZGREBZG            =   ACCT_STG.BIC_ZGREBZG            
,BIC_ZGREBZT            =   ACCT_STG.BIC_ZGREBZT            
,BIC_ZGREINDAT          =   ACCT_STG.BIC_ZGREINDAT          
,BIC_ZGTCODE            =   ACCT_STG.BIC_ZGTCODE            
,BIC_ZGTXBFW            =   ACCT_STG.BIC_ZGTXBFW            
,BIC_ZGTXBHW            =   ACCT_STG.BIC_ZGTXBHW            
,BIC_ZGUPDDT            =   ACCT_STG.BIC_ZGUPDDT            
,BIC_ZGWMWST            =   ACCT_STG.BIC_ZGWMWST            
,BIC_ZGXSTOV            =   ACCT_STG.BIC_ZGXSTOV            
,BIC_ZGZUMSK            =   ACCT_STG.BIC_ZGZUMSK            
,BLINE_DATE             =   ACCT_STG.BLINE_DATE             
,BUS_AREA               =   ACCT_STG.BUS_AREA               
,CHRT_ACCTS             =   ACCT_STG.CHRT_ACCTS             
,CLEAR_DATE             =   ACCT_STG.CLEAR_DATE             
,CO_AREA                =   ACCT_STG.CO_AREA                
,COMP_CODE              =   ACCT_STG.COMP_CODE              
,COUNTRY                =   ACCT_STG.COUNTRY                
,CREA_TIME              =   ACCT_STG.CREA_TIME              
,CURRENCY               =   ACCT_STG.CURRENCY               
,DOC_HD_TXT             =   ACCT_STG.DOC_HD_TXT             
,FI_AWTYP               =   ACCT_STG.FI_AWTYP               
,FISCPER3               =   ACCT_STG.FISCPER3               
,G_L_CURRCY             =   ACCT_STG.G_L_CURRCY             
,ITEM_NUM               =   ACCT_STG.ITEM_NUM               
,POST_KEY               =   ACCT_STG.POST_KEY               
,R_CURRENCY             =   ACCT_STG.R_CURRENCY             
,RECORDMODE             =   ACCT_STG.RECORDMODE             
,REF_DOC_NO             =   ACCT_STG.REF_DOC_NO             
,REF_KEY3               =   ACCT_STG.REF_KEY3               
,SP_GL_IND              =   ACCT_STG.SP_GL_IND              
,SP_GL_TT               =   ACCT_STG.SP_GL_TT               
,TAX_BAS_RC             =   ACCT_STG.TAX_BAS_RC             
,TAX_BAS_TC             =   ACCT_STG.TAX_BAS_TC             
,VALUE_DATE             =   ACCT_STG.VALUE_DATE             
,FISCVRNT_E				=   ACCT_STG.FISCVRNT_E				
,RECTYPE                =   ACCT_STG.RECTYPE                
,VERSION                =   ACCT_STG.VERSION 
,DEBITOR		= ACCT_STG.DEBITOR
,VENDOR		= ACCT_STG.VENDOR
,DW_CUST_ID_DEBITOR	= ACCT_STG.DW_CUST_ID_DEBITOR
               
--,DEB_CRE_DC             =ACCT_STG.DEB_CRE_DC 
--,DEB_CRE_L2             =ACCT_STG.DEB_CRE_L2 
--,LOC_CURRC2             =ACCT_STG.LOC_CURRC2 

WHERE	DWL_P_INTL.EAME_ACCT.DW_ACCT_DOC_ID =  ACCT_STG.DW_ACCT_DOC_ID
	AND   DWL_P_INTL.EAME_ACCT.CRU_ID  =  ACCT_STG.CRU_ID
        AND  DWL_P_INTL.EAME_ACCT.PSTNG_DATE       =   ACCT_STG.PSTNG_DATE
	AND   DWL_P_INTL.EAME_ACCT.DW_ACCT_LN_SEQ_NUM =  ACCT_STG.DW_ACCT_LN_SEQ_NUM

;

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;


INSERT INTO DWL_P_INTL.EAME_ACCT
 ( 
 DW_ACCT_DOC_ID
,DW_ACCT_LN_SEQ_NUM

/********New surrogate key columns*********/
,DW_CC_ID
,DW_GLA_ID
,DW_PCNTR_ID
,DW_PRJCT_TSK_ID
,DW_PDOC_ID
,DW_CUST_ORDR_ID
/******************************************/

,AC_DOC_NO
,AC_DOC_LN
,DOC_DATE
,AC_LEDGER
,CRU_ID
,PSTNG_DATE
,FISCVARNT
,FISCPER
,FISCYEAR
,AC_DOC_NR
,PSM_AWKEY
,AC_DOC_TYP
,REV_DOC_NO
,BIC_ZGSTJAH
,BIC_ZGSNAME
,FI_DOCSTAT
,DOC_CURRCY
,LOC_CURRCY
,AMOUNT
,DW_PIV_ID
,INV_ITEM
,INV_YEAR
,OI_ERFMG
,OI_BPMNG
,UNIT
,OI_BPRME
,CREATED_BY
,CREATEDON
,SYS_ID
,BIC_ZLIITMID
,GL_ACCOUNT
,OI_EBELN
,OI_EBELP
,CLR_DOC_NO
,OI_MENGE
,VALUE_LC
--,BIC_ZZMATERIAL
,FI_DBCRIND
,DW_LOC_ID
,DW_VNDR_ID_VENDOR
,DW_ITEM_ID_MATERIAL
,DW_BTCH_ID
,DW_STEP_ID  
,DW_CRTD_DTM
,DW_UPTD_DTM   
,ALLOC_NMBR
,PROFIT_CTR
,COSTCENTER
,POSTXT
,COORDER
,COSTELMNT
,WBS_ELEMT
,ACCOUNT_RNM
,ACCT_TYPE
,AEDAT
,BASE_UOM
,BIC_ZGAUGCP
,BIC_ZGBVORG
,BIC_ZGDBBLG
,BIC_ZGFRATH
,BIC_ZGHZUON
,BIC_ZGKURSF
,BIC_ZGKZBTR
,BIC_ZGMWSTS
,BIC_ZGPPNAM
,BIC_ZGPSWBT
,BIC_ZGQSSHB
,BIC_ZGREBZG
,BIC_ZGREBZT
,BIC_ZGREINDAT
,BIC_ZGTCODE
,BIC_ZGTXBFW
,BIC_ZGTXBHW
,BIC_ZGUPDDT
,BIC_ZGWMWST
,BIC_ZGXSTOV
,BIC_ZGZUMSK
,BLINE_DATE
,BUS_AREA
,CHRT_ACCTS
,CLEAR_DATE
,CO_AREA
,COMP_CODE
,COUNTRY
,CREA_TIME
,CURRENCY
,DOC_HD_TXT
,FI_AWTYP
,FISCPER3
,G_L_CURRCY
,ITEM_NUM
,POST_KEY
,R_CURRENCY
,RECORDMODE
,REF_DOC_NO
,REF_KEY3
,SP_GL_IND
,SP_GL_TT
,TAX_BAS_RC
,TAX_BAS_TC
,VALUE_DATE
,FISCVRNT_E
,RECTYPE
,VERSION
,DEBITOR
,vendor
,DW_CUST_ID_DEBITOR

--,DEB_CRE_DC 
--,DEB_CRE_L2 
--,LOC_CURRC2 

 )
SELECT
 ACCT_STG.DW_ACCT_DOC_ID
,ACCT_STG.DW_ACCT_LN_SEQ_NUM

/********New surrogate key columns*********/
,ACCT_STG.DW_CC_ID
,ACCT_STG.DW_GLA_ID
,ACCT_STG.DW_PCNTR_ID
,ACCT_STG.DW_PRJCT_TSK_ID
,ACCT_STG.DW_PDOC_ID
,ACCT_STG.DW_CUST_ORDR_ID
/******************************************/

,ACCT_STG.AC_DOC_NO
,ACCT_STG.AC_DOC_LN
,ACCT_STG.DOC_DATE
,ACCT_STG.AC_LEDGER
,ACCT_STG.CRU_ID
,ACCT_STG.PSTNG_DATE
,ACCT_STG.FISCVARNT
,ACCT_STG.FISCPER
,ACCT_STG.FISCYEAR
,ACCT_STG.AC_DOC_NR
,ACCT_STG.PSM_AWKEY
,ACCT_STG.AC_DOC_TYP
,ACCT_STG.REV_DOC_NO
,ACCT_STG.BIC_ZGSTJAH
,ACCT_STG.BIC_ZGSNAME
,ACCT_STG.FI_DOCSTAT
,ACCT_STG.DOC_CURRCY
,ACCT_STG.LOC_CURRCY
,ACCT_STG.AMOUNT
,ACCT_STG.DW_PIV_ID
,ACCT_STG.INV_ITEM
,ACCT_STG.INV_YEAR
,ACCT_STG.OI_ERFMG
,ACCT_STG.OI_BPMNG
,ACCT_STG.UNIT
,ACCT_STG.OI_BPRME
,ACCT_STG.CREATED_BY
,ACCT_STG.CREATEDON
,ACCT_STG.SYS_ID
,ACCT_STG.BIC_ZLIITMID
,ACCT_STG.GL_ACCOUNT
,ACCT_STG.OI_EBELN
,ACCT_STG.OI_EBELP
,ACCT_STG.CLR_DOC_NO
,ACCT_STG.OI_MENGE
,ACCT_STG.VALUE_LC
--,ACCT_STG.BIC_ZZMATERIAL
,ACCT_STG.FI_DBCRIND
,ACCT_STG.DW_LOC_ID
,ACCT_STG.DW_VNDR_ID_VENDOR
,ACCT_STG.DW_ITEM_ID_MATERIAL
,ACCT_STG.DW_BTCH_ID
,ACCT_STG.DW_STEP_ID                  
,ACCT_STG.DW_CRTD_DTM             
,ACCT_STG.DW_UPTD_DTM
,ACCT_STG.ALLOC_NMBR
,ACCT_STG.PROFIT_CTR
,ACCT_STG.COSTCENTER
,ACCT_STG.POSTXT
,ACCT_STG.COORDER
,ACCT_STG.COSTELMNT
,ACCT_STG.WBS_ELEMT
,ACCT_STG.ACCOUNT_RNM
,ACCT_STG.ACCT_TYPE
,ACCT_STG.AEDAT
,ACCT_STG.BASE_UOM
,ACCT_STG.BIC_ZGAUGCP
,ACCT_STG.BIC_ZGBVORG
,ACCT_STG.BIC_ZGDBBLG
,ACCT_STG.BIC_ZGFRATH
,ACCT_STG.BIC_ZGHZUON
,ACCT_STG.BIC_ZGKURSF
,ACCT_STG.BIC_ZGKZBTR
,ACCT_STG.BIC_ZGMWSTS
,ACCT_STG.BIC_ZGPPNAM
,ACCT_STG.BIC_ZGPSWBT
,ACCT_STG.BIC_ZGQSSHB
,ACCT_STG.BIC_ZGREBZG
,ACCT_STG.BIC_ZGREBZT
,ACCT_STG.BIC_ZGREINDAT
,ACCT_STG.BIC_ZGTCODE
,ACCT_STG.BIC_ZGTXBFW
,ACCT_STG.BIC_ZGTXBHW
,ACCT_STG.BIC_ZGUPDDT
,ACCT_STG.BIC_ZGWMWST
,ACCT_STG.BIC_ZGXSTOV
,ACCT_STG.BIC_ZGZUMSK
,ACCT_STG.BLINE_DATE
,ACCT_STG.BUS_AREA
,ACCT_STG.CHRT_ACCTS
,ACCT_STG.CLEAR_DATE
,ACCT_STG.CO_AREA
,ACCT_STG.COMP_CODE
,ACCT_STG.COUNTRY
,ACCT_STG.CREA_TIME
,ACCT_STG.CURRENCY
,ACCT_STG.DOC_HD_TXT
,ACCT_STG.FI_AWTYP
,ACCT_STG.FISCPER3
,ACCT_STG.G_L_CURRCY
,ACCT_STG.ITEM_NUM
,ACCT_STG.POST_KEY
,ACCT_STG.R_CURRENCY
,ACCT_STG.RECORDMODE
,ACCT_STG.REF_DOC_NO
,ACCT_STG.REF_KEY3
,ACCT_STG.SP_GL_IND
,ACCT_STG.SP_GL_TT
,ACCT_STG.TAX_BAS_RC
,ACCT_STG.TAX_BAS_TC
,ACCT_STG.VALUE_DATE
,ACCT_STG.FISCVRNT_E
,ACCT_STG.RECTYPE
,ACCT_STG.VERSION
,ACCT_STG.DEBITOR
,ACCT_STG.VENDOR
,ACCT_STG.DW_CUST_ID_DEBITOR

--,ACCT_STG.DEB_CRE_DC 
--,ACCT_STG.DEB_CRE_L2 
--,ACCT_STG.LOC_CURRC2 


FROM DWL_P_INTL_WORK.DW_EAME_ACCT_STG AS ACCT_STG

LEFT OUTER JOIN  DWL_P_INTL.EAME_ACCT AS TGT_ACCT
	ON ACCT_STG.DW_ACCT_DOC_ID			=  TGT_ACCT.DW_ACCT_DOC_ID
	AND  ACCT_STG.CRU_ID				=  TGT_ACCT.CRU_ID
        AND ACCT_STG.PSTNG_DATE                         = TGT_ACCT.PSTNG_DATE
	--AND  ACCT_STG.FISCPER				=  TGT_ACCT.FISCPER
	AND  ACCT_STG.DW_ACCT_LN_SEQ_NUM 	=  TGT_ACCT.DW_ACCT_LN_SEQ_NUM

WHERE TGT_ACCT.DW_ACCT_DOC_ID  IS NULL
AND ACCT_STG.AC_DOC_NO IS NOT NULL
;


.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;


ET;

/***************** ERROR HANDLING ********************************/
.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;
/***************** ERROR HANDLING ********************************/

UPDATE PEPCMN_P.DT_PRM2 
SET
CTL_STRT_DTM = (SELECT CTL_END_DTM FROM PEPCMN_P.DT_PRM2
WHERE STEP_ID =
          (
            SELECT MAX(STEP.STEP_ID)
			FROM PEPCMN_P.STEP
			INNER JOIN PEPCMN_P.ACTVTY
			ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
			INNER JOIN PEPCMN_P.SYS
			ON SYS.SYS_NM = ACTVTY.SYS_NM
			WHERE 	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
          )
          AND SYS_ID = 0
)
,CTL_END_DTM = '${CTL_END_DTM_GEN}'
WHERE STEP_ID =
          (
            SELECT MAX(STEP.STEP_ID)
			FROM PEPCMN_P.STEP
			INNER JOIN PEPCMN_P.ACTVTY
			ON ACTVTY.ACTVTY_ID = STEP.ACTVTY_ID
			INNER JOIN PEPCMN_P.SYS
			ON SYS.SYS_NM = ACTVTY.SYS_NM
			WHERE 	SYS.SYS_NM = '${DWSYS}' AND
			ACTVTY_NM = '${ACTIVITY}' AND
			STEP_NM = '${STEP}'
          ) AND SYS_ID = 0
;

 .IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

 SELECT CURRENT_TIMESTAMP(0);

.IF ERRORLEVEL <> 0 THEN .QUIT ERRORLEVEL;

/***************** COLLECT STATS ON REQUIRED COLUMNS ********************************/

COLLECT STATS ON DWL_P_INTL.EAME_ACCT COLUMN(AC_DOC_NO,AC_DOC_LN,DOC_DATE);


/***************** LOG OFF FROM BTEQ & QUIT ********************************/
  .LOGOFF;
  .QUIT;
EOF

RC=$?

echo "Return Code $RC" >> ${LOGFILE}

if [ ${RC} -ne 0 ]; then
  ${STEP_ERR_KSH} PRCSS_SQL_ERR "Error executing merge process." "Return code was ${RC}"
  exit $RC
fi 